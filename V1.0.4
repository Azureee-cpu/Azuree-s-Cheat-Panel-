-- // Services \\
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- // Players current room & checkers \\
-- Define it at the top, outside any function
local BrokenBone = true
local gubby = true

-- Check room and set value
if game.PlaceId == 7797478022 then
    BrokenBone = false
else
    BrokenBone = true
end

-- Check room and set value
if game.PlaceId == 7180042682 then
    gubby = false
else
    gubby = true
end


-- // Load UI Library \\
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- // Window \\
local Window = WindUI:CreateWindow({
    Title = "» ΛZURΞΞ CHΞΛT PΛNΞL «",
    Icon = "cat", -- lucide icon
    Author = "BΨ ΛZURΞΞ",
    Folder = "Azuree's Cheat Panel",


-- // User Info \\
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
        end,
    },

-- // Key \\
    KeySystem = { 

        Key = { "58A9Z4U", "AZU910" },
        
        Note = "Ask Azuree On Discord For A Key!",

        Thumbnail = {
            Title = "",
        },

        URL = "",
        SaveKey = true, -- automatically save and load the key.
    },
})





    
	Window:Tag({
    	Title = "> v1.0.4 <",
    	Color = Color3.fromHex("#170047"),
    	Radius = 13, -- from 0 to 13
	})

	Window:Tag({
    	Title = "> B3TΛ <",
    	Color = Color3.fromHex("#001740"),
    	Radius = 13, -- from 0 to 13
	})

	Window:OnClose(function()
    	WindUI:Notify({
    		Title = "[SYSTΞM]",
    		Content = "WINDØW CLØSΞD",
    		Duration = 3,
    		Icon = "code",
		})
	end)

Window:OnOpen(function()
    	WindUI:Notify({
    		Title = "[SYSTΞM]",
    		Content = "WINDØW ØPΞNΞD",
    		Duration = 3,
    		Icon = "code",
		})
	end)

	Window:OnDestroy(function()
    	WindUI:Notify({
    		Title = "[SYSTΞM]",
    		Content = "WINDØW DΞSTRØYΞD",
    		Duration = 3,
    		Icon = "code",
		})
	end)


-- // Themes \\
WindUI:AddTheme({
    Name = "Dark", -- theme name
    
    Accent = Color3.fromHex("#0D0D0D"),
    Dialog = Color3.fromHex("#0D0D0D"),
    Outline = Color3.fromHex("#0A0A0A"),
    Text = Color3.fromHex("#FFFFFF"),
    Placeholder = Color3.fromHex("#7a7a7a"),
    Background = Color3.fromHex("#0D0D0D"),
    Button = Color3.fromHex("#0A0A0A"),
    Icon = Color3.fromHex("#FFFFFF")
})

WindUI:AddTheme({
    Name = "Light", -- theme name
    
    Accent = Color3.fromHex("#e6e7e8"),
    Dialog = Color3.fromHex("#e6e7e8"),
    Outline = Color3.fromHex("#d4d5d6"),
    Text = Color3.fromHex("#000000"),
    Placeholder = Color3.fromHex("#7a7a7a"),
    Background = Color3.fromHex("#e6e7e8"),
    Button = Color3.fromHex("#e6e7e8"),
    Icon = Color3.fromHex("#000000")
})

WindUI:AddTheme({
    Name = "SuperDark", -- theme name
    
    Accent = Color3.fromHex("#000000"),
    Dialog = Color3.fromHex("#000000"),
    Outline = Color3.fromHex("#000000"),
    Text = Color3.fromHex("#ffffff"),
    Placeholder = Color3.fromHex("#000000"),
    Background = Color3.fromHex("#000000"),
    Button = Color3.fromHex("#242323"),
    Icon = Color3.fromHex("#ffffff")
})

WindUI:AddTheme({
    Name = "Blue", -- theme name
    
    Accent = Color3.fromHex("#010d3d"),
    Dialog = Color3.fromHex("#010d3d"),
    Outline = Color3.fromHex("#010d3d"),
    Text = Color3.fromHex("#ffffff"),
    Placeholder = Color3.fromHex("#010d3d"),
    Background = Color3.fromHex("#010d3d"),
    Button = Color3.fromHex("#000103"),
    Icon = Color3.fromHex("#ffffff")
})

-- =============================
-- Create Section "Other"
-- =============================
local OtherSection = Window:Section({
    Title = "Other",
    Icon = "shield-question-mark",
    Opened = true,
})

-- =============================
-- Settings Tab
-- =============================
local SettingsTab = OtherSection:Tab({
    Title = "Settings",
    Icon = "settings",
    Locked = false,
})

local ThemeSection = SettingsTab:Section({
    Title = "// - = [ Theme Changer ] =- \\",
})

-- Theme Selector
local selectedTheme = "Dark"
ThemeSection:Dropdown({
    Title = "Theme Selector",
    Values = {
        { Title = "Dark", Icon = "paintbrush" },
        { Title = "Light", Icon = "paintbrush" },
        { Title = "SuperDark", Icon = "paintbrush" },
        { Title = "Blue", Icon = "paintbrush" },
    },
    Value = selectedTheme,
    Callback = function(theme)
        if type(theme) == "table" and theme.Title then
            selectedTheme = theme.Title
        else
            selectedTheme = theme
        end
    end
})

-- Set Theme Button
ThemeSection:Button({
    Title = "Set Theme",
    Desc = "Sets The Theme Of The Menu",
    Locked = false,
    Callback = function()
        if selectedTheme and selectedTheme ~= "" then
            WindUI:SetTheme(selectedTheme)
            WindUI:Notify({
                Title = "[SYSTΞM]",
                Content = "THΞMΞ CHANGΞD TO " .. selectedTheme,
                Duration = 3,
                Icon = "code",
            })
        end
    end
})

-- Background Toggle
ThemeSection:Toggle({
    Title = "Background Image",
    Desc = "Toggles a background image behind the menu.",
    Icon = "image",
    Type = "Checkbox",
    Value = false,
    Callback = function(backt)
        WindUI:SetBackground({
            Image = "rbxassetid://1904861641",
            Transparency = backt and 0 or 1,
            TileSize = UDim2.new(1, 0, 1, 0),
        })
        WindUI:Notify({
            Title = "[SYSTΞM]",
            Content = backt and "BΛCKGRØUND ΞNΛBLΞD." or "BΛCKGRØUND DΙSΛBLΞD.",
            Duration = 3,
            Icon = backt and "image" or "x",
        })
    end
})

-- =============================
-- Config Tab
-- =============================
local ConfigTab = OtherSection:Tab({
    Title = "Config",
    Icon = "folder",
})

local ConfigTabSection = ConfigTab:Section({
    Title = "Configuration",
    Icon = "settings",
})

local ConfigManager = Window.ConfigManager
local ConfigName = "default"

-- Input for naming configs
local ConfigNameInput = ConfigTabSection:Input({
    Title = "Config Name",
    Icon = "file-cog",
    Callback = function(value)
        ConfigName = value
    end
})

-- Dropdown for existing configs
local AllConfigs = ConfigManager:AllConfigs()
local DefaultValue = (table.find(AllConfigs, ConfigName) and ConfigName) or (AllConfigs[1] or "")
ConfigTabSection:Dropdown({
    Title = "All Configs",
    Desc = "Select existing configs",
    Values = AllConfigs,
    Value = DefaultValue,
    Callback = function(value)
        ConfigName = value
        ConfigNameInput:Set(value)
    end
})

ConfigTabSection:Space()

-- Save Button
ConfigTabSection:Button({
    Title = "Save Config",
    Icon = "save",
    Justify = "Center",
    Callback = function()
        if ConfigName and ConfigName ~= "" then
            local myConfig = ConfigManager:CreateConfig(ConfigName)
            myConfig:Save()
            WindUI:Notify({
                Title = "Config Saved",
                Content = "Config '" .. ConfigName .. "' has been saved!",
                Icon = "check",
                Duration = 3,
            })
        end
    end
})

ConfigTabSection:Space()

-- Load Button
ConfigTabSection:Button({
    Title = "Load Config",
    Icon = "refresh-cw",
    Justify = "Center",
    Callback = function()
        if ConfigName and ConfigName ~= "" then
            local myConfig = ConfigManager:CreateConfig(ConfigName)
            myConfig:Load()
            WindUI:Notify({
                Title = "Config Loaded",
                Content = "Config '" .. ConfigName .. "' has been loaded!",
                Icon = "refresh-cw",
                Duration = 3,
            })
        end
    end
})

-- Auto-save every 10 seconds
task.spawn(function()
    while true do
        task.wait(10)
        if ConfigName and ConfigName ~= "" then
            local myConfig = ConfigManager:CreateConfig(ConfigName)
            myConfig:Save()
        end
    end
end)


local BrokenBonesSection = Window:Section({
    Title = "Broken Bones Simulator 2",
	Icon = "bone",
})

local OPTab = BrokenBonesSection:Tab({
    Title = "OP",
    Icon = "skull",
    Locked = BrokenBone,
})

local BrokenBonesSection = OPTab:Section({ 
    Title = "// - = [ Money & Bones ] =- \\",
})

local Button = OPTab:Button({
    Title = "Give Infinite Money",
    Desc = "I don't know,",
    Locked = false,
    Callback = function()


	local args = {
    [1] = {
        ["Total"] = math.huge,
        ["Bruises"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["Fractures"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["Speed"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["TestingNewInjury"] = 0,
        ["Sprains"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["Breaks"] = 1231414122222222222222222222222222222222222222222222222222222
    }
}

game:GetService("ReplicatedStorage").Remotes.Player_NewRun:FireServer(unpack(args))
    end
})


local Button = OPTab:Button({
    Title = "Give Infinite Bones",
    Desc = "I don't know,",
    Locked = false,
    Callback = function()

	local args = {
    [1] = {
        ["Total"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["Bruises"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["Fractures"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["Speed"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["TestingNewInjury"] = 0,
        ["Sprains"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["Breaks"] = math.huge
    }
}

game:GetService("ReplicatedStorage").Remotes.Player_NewRun:FireServer(unpack(args))
    end
})



local GubbySection = Window:Section({
    Title = "Military Tycoon",
	Icon = "shield-off",
})


local AutoTab = GubbySection:Tab({
    Title = "Auto Farm",
    Icon = "bot",
    Locked = gubby,
})

local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Event = ReplicatedStorage.Packages._Index["sleitnick_knit@1.5.1"].knit.Services.EventService.RF.ClaimBlueprint

-- Variable to track whether the loop should run
local autoPumpkinEnabled = false

local Toggle = AutoTab:Toggle({
    Title = "Enable Auto Pumpkin",
    Desc = "Collects all of the pumpkins for you!",
    Icon = "boxes",
    Type = "Checkbox",
    Value = false, -- default value
    Callback = function(enabled)
        autoPumpkinEnabled = enabled

        if enabled then
            WindUI:Notify({
                Title = "[SYSTΞM]",
                Content = "ΛLL PUMPKINS FØUND... CØLLΞCTING...",
                Duration = 3,
                Icon = "code",
            })

            -- Run in a separate thread so it doesn’t freeze the UI
            task.spawn(function()
                while autoPumpkinEnabled do
                    for i = 1, 25 do
                        Event:InvokeServer("October18_Part" .. i)
                        task.wait(0.1) -- small delay between each
                    end

                    WindUI:Notify({
                        Title = "[SYSTΞM]",
                        Content = "ΞVΞRY PUMPKIN HΛS BΞΞN CØLLΞCTΞD. PLΞΛSΞ WΛIT 12 MINUTΞS TØ CLΛIM THΞ NΞXT BΛTCH.",
                        Duration = 5,
                        Icon = "code",
                    })

                    -- Wait 12 minutes before next batch
                    for i = 1, 50 * 60 do
                        if not autoPumpkinEnabled then break end
                        task.wait(1)
                    end
                end
            end)
        else
            WindUI:Notify({
                Title = "[SYSTΞM]",
                Content = "ΛUTØ PUMPKIN DΙSΛBLΞD.",
                Duration = 3,
                Icon = "code",
            })
        end
    end,
})






local AimbotTab = GubbySection:Tab({
    Title = "Cheats",
    Icon = "target",
    Locked = gubby,
})

--// Settings (defaults)
local aimEnabled = false
local fovCircle
local FOV_RADIUS = 50
local FOV_COLOR = Color3.fromRGB(140, 60, 255)
local MAX_DISTANCE = 250
local SMOOTHNESS = 0.15 -- camera lerp speed
local SelectedColor = "white" -- default selection

--// Create FOV circle
local function createFOV()
    local circle = Drawing.new("Circle")
    circle.Visible = true
    circle.Thickness = 2
    circle.Radius = FOV_RADIUS
    circle.Transparency = 1
    circle.Color = FOV_COLOR
    circle.Filled = false
    return circle
end

--// Get closest player in FOV
local function getClosestPlayerInFOV()
    local closest, shortest = nil, math.huge
    local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("Head") then
            local head = plr.Character.Head
            local pos, onScreen = Camera:WorldToViewportPoint(head.Position)
            if onScreen then
                local dist = (Vector2.new(pos.X, pos.Y) - screenCenter).Magnitude
                local distance3D = (head.Position - Camera.CFrame.Position).Magnitude
                if dist < FOV_RADIUS and distance3D < MAX_DISTANCE and dist < shortest then
                    shortest = dist
                    closest = plr
                end
            end
        end
    end

    return closest
end

--// FOV Update Loop
local function updateFOV()
    task.spawn(function()
        while aimEnabled do
            if not fovCircle then break end

            -- Center the FOV circle properly
            local center = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
            fovCircle.Position = center
            fovCircle.Radius = FOV_RADIUS
            fovCircle.Color = FOV_COLOR

            -- Aim at closest target
            local target = getClosestPlayerInFOV()
            if target and target.Character and target.Character:FindFirstChild("Head") then
                local head = target.Character.Head
                local direction = (head.Position - Camera.CFrame.Position).Unit
                local desired = CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + direction)
                Camera.CFrame = Camera.CFrame:Lerp(desired, SMOOTHNESS)
            end

            RunService.RenderStepped:Wait()
        end
    end)
end

--// Toggle
local Toggle = AimbotTab:Toggle({
    Title = "Auto Aim (FOV Lock)",
    Desc = "Smoothly rotates camera toward closest player within FOV",
    Icon = "crosshair",
    Type = "Checkbox",
    Value = false,
    Callback = function(state)
        aimEnabled = state

        if state then
            WindUI:Notify({
                Title = "[SYSTΞM]",
                Content = "ΛUTØ ΛIM ΞNΛBLΞD",
                Duration = 3,
                Icon = "target",
            })

            fovCircle = createFOV()
            updateFOV()
        else
            WindUI:Notify({
                Title = "[SYSTΞM]",
                Content = "ΛUTØ ΛIM DΙSΛBLΞD",
                Duration = 3,
                Icon = "x",
            })

            if fovCircle then
                fovCircle.Visible = false
                fovCircle:Remove()
                fovCircle = nil
            end
        end
    end,
})

--// FOV Radius Slider
local FOVSlider = AimbotTab:Slider({
    Title = "FOV Radius",
    Desc = "Adjust the size of the aim circle",
    Step = 10,
    Value = {
        Min = 1,
        Max = 400,
        Default = 150,
    },
    Callback = function(val)
        FOV_RADIUS = val
        if fovCircle then fovCircle.Radius = val end
    end,
})

--// Max Distance Slider
local DistSlider = AimbotTab:Slider({
    Title = "Max Aim Distance",
    Desc = "How far players can be to lock on",
    Step = 10,
    Value = {
        Min = 100,
        Max = 1000,
        Default = 250,
    },
    Callback = function(val)
        MAX_DISTANCE = val
    end,
})

--// FOV Color Dropdown
local FOVColorDropdown = AimbotTab:Dropdown({
    Title = "FOV Color",
    Desc = "Select a preset color for the FOV circle",
    Values = { "Purple", "Red", "Green", "Blue", "White" },
    Multi = false,
    Callback = function(selected)
        SelectedColor = selected
    end,
})

--// Apply Color Button
local ApplyColorButton = AimbotTab:Button({
    Title = "Apply FOV Color",
    Desc = "Applies your selected FOV circle color",
    Locked = false,
    Callback = function()
        local colors = {
            Purple = Color3.fromRGB(140, 60, 255),
            Red = Color3.fromRGB(255, 60, 60),
            Green = Color3.fromRGB(60, 255, 60),
            Blue = Color3.fromRGB(60, 120, 255),
            White = Color3.fromRGB(255, 255, 255),
        }

        FOV_COLOR = colors[SelectedColor] or Color3.fromRGB(140, 60, 255)

        if fovCircle then
            fovCircle.Color = FOV_COLOR
        end

        WindUI:Notify({
            Title = "[SYSTΞM]",
            Content = "FOV CØLØR ΞNΛBLΞD: " .. SelectedColor,
            Duration = 2,
            Icon = "palette",
        })
    end,
})
