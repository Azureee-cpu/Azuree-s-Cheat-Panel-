-- // Services \\
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Lighting = game:GetService("Lighting")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local Camera = Workspace.CurrentCamera

-- // Players current room & checkers \\
-- Define it at the top, outside any function
local BrokenBone = true
local gubby = true
-- Check room and set value
if game.PlaceId == 7797478022 then
    BrokenBone = false
else
    BrokenBone = true
end




-- // Load UI Library \\
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-- // Window \\
local Window = WindUI:CreateWindow({
    Title = "Azuree's Cheat Panel",
    Icon = "cat", -- lucide icon
    Author = "By Azuree",
    Folder = "Azuree's Cheat Panel",


-- // User Info \\
    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function()
        end,
    },

-- // Key \\
    KeySystem = { 

        Key = { "58A9Z4U", "AZU910" },
        
        Note = "Ask Azuree On Discord For A Key!",

        Thumbnail = {
            Title = "",
        },

        URL = "",
        SaveKey = true, -- automatically save and load the key.
    },
})

    
	Window:Tag({
    	Title = "v1.0.3",
    	Color = Color3.fromHex("#170047"),
    	Radius = 13, -- from 0 to 13
	})

	Window:Tag({
    	Title = "Beta",
    	Color = Color3.fromHex("#170047"),
    	Radius = 13, -- from 0 to 13
	})

	Window:OnClose(function()
    	WindUI:Notify({
    		Title = "Incoming Notification...",
    		Content = "Window Closed Successfully.",
    		Duration = 3,
    		Icon = "code",
		})
	end)

Window:OnOpen(function()
    	WindUI:Notify({
    		Title = "Incoming Notification...",
    		Content = "Window Opened Successfully.",
    		Duration = 3,
    		Icon = "code",
		})
	end)

	Window:OnDestroy(function()
    	WindUI:Notify({
    		Title = "Incoming Notification...",
    		Content = "Window Destroyed Successfully.",
    		Duration = 3,
    		Icon = "code",
		})
	end)

-- // Themes \\
WindUI:AddTheme({
    Name = "Dark", -- theme name
    
    Accent = Color3.fromHex("#0D0D0D"),
    Dialog = Color3.fromHex("#0D0D0D"),
    Outline = Color3.fromHex("#0A0A0A"),
    Text = Color3.fromHex("#FFFFFF"),
    Placeholder = Color3.fromHex("#7a7a7a"),
    Background = Color3.fromHex("#0D0D0D"),
    Button = Color3.fromHex("#0A0A0A"),
    Icon = Color3.fromHex("#FFFFFF")
})

WindUI:AddTheme({
    Name = "Light", -- theme name
    
    Accent = Color3.fromHex("#e6e7e8"),
    Dialog = Color3.fromHex("#e6e7e8"),
    Outline = Color3.fromHex("#d4d5d6"),
    Text = Color3.fromHex("#000000"),
    Placeholder = Color3.fromHex("#7a7a7a"),
    Background = Color3.fromHex("#e6e7e8"),
    Button = Color3.fromHex("#e6e7e8"),
    Icon = Color3.fromHex("#000000")
})

WindUI:AddTheme({
    Name = "SuperDark", -- theme name
    
    Accent = Color3.fromHex("#000000"),
    Dialog = Color3.fromHex("#000000"),
    Outline = Color3.fromHex("#000000"),
    Text = Color3.fromHex("#ffffff"),
    Placeholder = Color3.fromHex("#000000"),
    Background = Color3.fromHex("#000000"),
    Button = Color3.fromHex("#242323"),
    Icon = Color3.fromHex("#ffffff")
})

WindUI:AddTheme({
    Name = "Blue", -- theme name
    
    Accent = Color3.fromHex("#010d3d"),
    Dialog = Color3.fromHex("#010d3d"),
    Outline = Color3.fromHex("#010d3d"),
    Text = Color3.fromHex("#ffffff"),
    Placeholder = Color3.fromHex("#010d3d"),
    Background = Color3.fromHex("#010d3d"),
    Button = Color3.fromHex("#000103"),
    Icon = Color3.fromHex("#ffffff")
})

-- // Sections \\
local OtherSection = Window:Section({
    Title = "Other",
})


-- // Tabs \\
local OtherTab = OtherSection:Tab({
    Title = "Settings",
    Icon = "settings", -- optional
    Locked = false,
})


-- // Settings Tab \\

local selectedTheme = "Dark"

local Dropdown = OtherTab:Dropdown({
    Title = "Theme Selector",
    Values = {
        { Title = "Dark", Icon = "paintbrush" },
        { Title = "Light", Icon = "paintbrush" },
		{ Title = "SuperDark", Icon = "paintbrush" },
		{ Title = "Blue", Icon = "paintbrush" },
    },
    Value = selectedTheme,
    Callback = function(theme)
        -- Some UI libs return the entire table instead of just the title
        if type(theme) == "table" and theme.Title then
            selectedTheme = theme.Title
        else
            selectedTheme = theme
        end
    end
})

local Button = OtherTab:Button({
    Title = "Set Theme",
    Desc = "Sets The Theme Of The Menu",
    Locked = false,
    Callback = function()
        if selectedTheme == "Dark" then
            WindUI:SetTheme("Dark")
        elseif selectedTheme == "Light" then
            WindUI:SetTheme("Light")
        elseif selectedTheme == "SuperDark" then
            WindUI:SetTheme("SuperDark")
        elseif selectedTheme == "Blue" then
            WindUI:SetTheme("Blue")
        end
    end
})

local PlayerTab = OtherSection:Tab({
    Title = "Player",
    Icon = "user", -- optional
    Locked = false,
})

local SpeedSlider = PlayerTab:Slider({
    Title = "Player Speed",
    Step = 1,
    Value = {
        Min = 1,
        Max = 500,
        Default = 16,
    },
    Callback = function(value)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = value
        end
    end,
})

local JumpPowerSlider = PlayerTab:Slider({
    Title = "Jump Power",
    Step = 1,
    Value = {
        Min = 1,
        Max = 500,
        Default = 50,
    },
    Callback = function(value)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            local humanoid = LocalPlayer.Character.Humanoid

            -- Ensure it uses JumpPower
            if humanoid.UseJumpPower ~= true then
                humanoid.UseJumpPower = true
            end

            humanoid.JumpPower = value
        end
    end,
})

local Button = PlayerTab:Button({
    Title = "Reset Speed & Jump Power",
    Desc = "No explanation needed.",
    Locked = false,
    Callback = function()
        JumpPowerSlider:Set(50)
        SpeedSlider:Set(16)
		end,
})


-----------------------------------------------------
--// FLY
-----------------------------------------------------
local flying = false
local flySpeed = 50
local flyConnection

local function StartFly()
    local char = LocalPlayer.Character
    if not char or not char:FindFirstChild("HumanoidRootPart") then return end
    local hrp = char.HumanoidRootPart

    flyConnection = RunService.RenderStepped:Connect(function()
        if not flying then return end
        local move = Vector3.zero

        if UserInputService:IsKeyDown(Enum.KeyCode.W) then move += Camera.CFrame.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then move -= Camera.CFrame.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then move -= Camera.CFrame.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then move += Camera.CFrame.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then move += Vector3.new(0, 1, 0) end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then move -= Vector3.new(0, 1, 0) end

        hrp.Velocity = move.Magnitude > 0 and move.Unit * flySpeed or Vector3.zero
    end)
end

local function StopFly()
    if flyConnection then
        flyConnection:Disconnect()
        flyConnection = nil
    end
    local char = LocalPlayer.Character
    if char and char:FindFirstChild("HumanoidRootPart") then
        char.HumanoidRootPart.Velocity = Vector3.zero
    end
end

PlayerTab:Toggle({
    Title = "Flight",
    Desc = "Fly with WASD + Space/Shift",
    Default = false,
    Callback = function(state)
        flying = state
        if state then StartFly() else StopFly() end
    end
})

PlayerTab:Slider({
    Title = "Flight Speed",
    Step = 5,
    Value = {
        Min = 0,
        Max = 500,
        Default = 50,
    },
    Callback = function(val)
        flySpeed = val
    end
})

-----------------------------------------------------
--// NOCLIP
-----------------------------------------------------
local noclipEnabled = false
local noclipConnection

PlayerTab:Toggle({
    Title = "NoClip",
    Desc = "Walk through walls",
    Default = false,
    Callback = function(state)
        noclipEnabled = state
        if state then
            noclipConnection = RunService.Stepped:Connect(function()
                if LocalPlayer.Character then
                    for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            if noclipConnection then
                noclipConnection:Disconnect()
                noclipConnection = nil
            end
        end
    end
})

-----------------------------------------------------
--// INFINITE JUMP
-----------------------------------------------------
local infJumpEnabled = false

UserInputService.JumpRequest:Connect(function()
    if infJumpEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

PlayerTab:Toggle({
    Title = "Infinite Jump",
    Desc = "Jump endlessly",
    Default = false,
    Callback = function(state)
        infJumpEnabled = state
    end
})

-----------------------------------------------------
--// GODMODE (Health 100 every frame)
-----------------------------------------------------
local godEnabled = false
local godConnection

PlayerTab:Toggle({
    Title = "Godmode",
    Desc = "Keeps your health locked to 100",
    Default = false,
    Callback = function(state)
        godEnabled = state
        if state then
            godConnection = RunService.Heartbeat:Connect(function()
                local char = LocalPlayer.Character
                if char then
                    local hum = char:FindFirstChildOfClass("Humanoid")
                    if hum then
                        hum.Health = 100
                    end
                end
            end)
        else
            if godConnection then
                godConnection:Disconnect()
                godConnection = nil
            end
        end
    end
})
 
local Button = PlayerTab:Button({
    Title = "Kill Self",
    Desc = "Sets your health to 0",
    Locked = false,
    Callback = function()
        local character = LocalPlayer.Character
        if character and character:FindFirstChildOfClass("Humanoid") then
            character:FindFirstChildOfClass("Humanoid").Health = 0
        end
    end
})



local BrokenBonesSection = Window:Section({
    Title = "Broken Bones Simulator 2",
})


local OPTab = BrokenBonesSection:Tab({
    Title = "OP",
    Icon = "skull",
    Locked = BrokenBone,
})

local Button = OPTab:Button({
    Title = "Give Infinite Money",
    Desc = "I don't know,",
    Locked = false,
    Callback = function()

	local args = {
    [1] = {
        ["Total"] = math.huge,
        ["Bruises"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["Fractures"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["Speed"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["TestingNewInjury"] = 0,
        ["Sprains"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["Breaks"] = 1231414122222222222222222222222222222222222222222222222222222
    }
}

game:GetService("ReplicatedStorage").Remotes.Player_NewRun:FireServer(unpack(args))
    end
})


local Button = OPTab:Button({
    Title = "Give Infinite Bones",
    Desc = "I don't know,",
    Locked = false,
    Callback = function()
	local args = {
    [1] = {
        ["Total"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["Bruises"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["Fractures"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["Speed"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["TestingNewInjury"] = 0,
        ["Sprains"] = 1231414122222222222222222222222222222222222222222222222222222,
        ["Breaks"] = math.huge
    }
}

game:GetService("ReplicatedStorage").Remotes.Player_NewRun:FireServer(unpack(args))
    end
})
